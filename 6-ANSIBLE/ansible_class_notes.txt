
Ansible
we need 100 servers to run java web application 
we need java, tomcat etc on the 100 servers, this can be easly done using ansible
we can write simple ansible playbook, which uses yaml

we can do using python and shell why ansible?defenitley we can do but we need to build framework
1) we can do that but we need to build our owrn framework
2)instead of that it is good to build our own existings tools like anisble, chef, puppet,saltstake etc


*How ansible is used by the industry?
1)as a configuration management tool --
2)eg 200 nodes  , 50 as manager remaining as worker, we need to install docker we can use ansible 
3)second use case it is also used for deploying
4)Use as orchestration tool like Jenkins

Ansible features:-
1)it is simple to use and learn
2)no additional scripting knowledge required
3)for eg chef archetecture , ansible is 100 times easly to use and learn
4)It is very powerful tool you can achieve any kind of automation
5)This tool is from redhat
6)it is open source
7)Ansible is agentless, other tools like chef,puppet uses agentless

Ansible architecture:-

we will have control machine and managed nodes may be nodes in docker-swarm or anyother nodes

Ansible control machine:-

The machine in which we install ansible and run ansible commands and playbooks
Ansible follows push model

push model vs pull model

Ansible connection types:-

Ansible connects to manged nodes using ssh if manged node is linux or using winrm if manged node is windows

setting up environmentfor practising annsible:-

1) Initialy we are going with two servers	
	a) wanna to use ubuntu for control machine
	b)control machine can be any platform except windows
	c)it also requires python 
	d)on control machine we need to have python installed
	b) 


Managed Nodes:-
It is any VM or servers which is managed by ansible

setting up manged node:-

 sudo apt-get update
    3  sudo apt-get install ansible -y


if you want to use our own scripts we need to build framework, when already exiting framework is there we can use it

Setting up control machine:-

step1:- install ubuntu 
update and install 
ubuntu@ip-172-31-91-42:~$ python --version
Python 2.7.15rc1
ubuntu@ip-172-31-91-42:~$ ansible --version
ansible 2.5.1
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/ubuntu/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/dist-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.15rc1 (default, Apr 15 2018, 21:51:34) [GCC 7.3.0]
ubuntu@ip-172-31-91-42:~$

for managed node i am using linux:-

manged node can be of any plaftform it can be windows or linux 
Ansible inventory file:-

contains all the details of manged nodes
1)ip address
2) user name
3) passwords
4)connection type (ssh or winrm)

ANSIBLE INVENTORY FILE 

all managed nodes inventory files must be added to the inventory files it is mandatory
inventory file is automatically createed when you install ansible and its default location is  /etc/ansible/hosts

you can use this file anywhere but you nee to use -i
we can have different inventory files for different environments  like dev test prod
while running ansible commands we can specify it


DEFAULT CONFIG FILE (anisble.cfg)

vim /etc/ansible/ansible.cfg
if fork = 3 it will do 3 things at a times
we can see the logs, and other things ssh_timeout

first ansible example:-

1)add manged node details in the inventory
2)open with sudo mode 
3)change the vim /etc/ansible/hosts file to add the .pem 

if we have 100 nodes we have to type yes 100 times , can we stop this
in ansible config we can supress it

Password letss authentication:
******************************
ansible controll node:
   ssh-keygen
   - it will generate private key and public key

ansible manage node:
        - goto .ssh/autorized_key
		- copy public key from controll node note: dont delete existing keys just append to file.

Inventory file:
web01 ansible_host=172.34.3.2 ansible_user=ec2_user

tasks:- 

anisble -m ping  -m is module name
ansible ip -m command -a 'free'   -a is adhoc command

ansible ip -m command -a 'uname -a'

want to install git on my manged nodes adhoc preparing and typing 

ansible ip -m yum -a 'name=git state=present'

ansible ip -m yum -a 'name=git state=present' --become

password less authentication


playbooks:
---------
- playbooks containes plays.
- plays are specific to task eg: install git, start docker, stop docker
- ansible has lots of built in modules
  
  Modules:
  ********
  yum module - use for linux m/c
  apt moudle
  ping module
  user
  file
  docker
  docker swarm
  git 
  
 Using ansible we can build our own custom modules. 
 
 First anisble play book:
 ---
 - hosts: webserver // here "-" means list and here going automate webservers
   become: True
   tasks:
    - name: install apache // it is description for your task
	  yum: 'name=httpd state=present'
	  (or)
	  yum:
	   name: httpd
	   state:present
	- service:
       	name: httpd
		state: started
		enabled: True // similar to chkconfig
	- name : install git
      yum:
        name: git
        state: present		
    - name: Makesure /var/www/html is present
      file:
         path: /var/www/html
         state: directory
		 
    - name: Get static websit from git and deploy on apache
        git: 
		  repo: https://github.com/javahometech/javahome-application
		  dest: /var/www/html/
		  
		  
with items:
*********	 yum:
			   name:"{{item}}"
			   state: present
			 with_item:
			        - httpd
					- git
              
    - here yum and with_item 	object of name		 
         
		 verify commands:
		 
		  ansible web04 -m command -a 'git --version'
		  ansible web04 -m command -a 'ls /var/www/html/'
		  cat /etc/*-release
		  
		  
Task:

1) I have website on git and take it and deploy.
  
  ok=2(count of tasks) changed=0(its already in desired state)
	  


2) Configure apache on to run on port 8088	
		
		- goto /etc/httpd/conf/httpd.conf  // some configuration related to your server
		  Listen 8088

1 option:
  - maintain httpd.config file in source and copy it will override with your changes
2 options:
  - directly override file.
- name: update port number of apache to 8080 and 9090
    lineinfile:
	  path: /etc/httpd/conf/httpd.conf
	  regex:'^Listen 80'  // "^" cops - line begining with Listen 80
	  line: 'Listen 8080'
- name:restart the service
  service:
     name: httpd
     state: restart	 

verify:
  - goto the manage node and check config file.
  /Listen 80  
  
problems: every time restarting server. we need to restart when there is change.  
 - 1) the problem is port number is hard coded if want to change the port we need to update playbook. instead of that you can pass as argument.
      solution: use variables and we can supply port number in command line.
      vars:
	   - http_port:8080
	  line: 'Listen {{http_port}}'
	  
	  vars:
	   - new_http_port:8080
	   - old_http_port:9090
	   
	   regex:'^Listen {{old_http_port}}$'  // "^" cops - line begining with Listen 80, "$"- end with 80
	  line: 'Listen {{new_http_port}}'
	  ansible-playbook hello-word.yml -e old_http_port=8080 \ -e new_http_port=80
   
   2) restarting server always 
   
   linux arbiry commands like grep
   
-------------------------------------------
eg: configure loadbalancer with 2 webservers
    loadbalancer - 2 tomcat server - mysql

- create 2 instances and name it webserver-1 and webserver-2
- Update invertory file in control m/c
- mkdir ansible-3tier folder
- git init
- create a repository in github with ansible-3tier
- git add .gitignore
- git remote add origin http://ansible-3tier.git
- git push -u origin maser
- write a playbook name the playbook with tomcat.yml
  ---
  -hosts:
   become: yes
   tasks:
    - name: Install java7
	  yum:
	   name: java-1.7.0-openjdk
	   state: present
    - name: Create Linux Group for tomcat
      group:
        name: tomcat
    - name: Create Linux user for tomcat
      user:
       name: tomcat
       group: tomcat
       become: true
       home: /usr/share/tomcat
    - name: Download tomcat
      get_url:
       url: http://mirrors.wuchna.com/apachemirror/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz
       dest: /opt/apache-tomcat-8.5.34.tar.gz	 //gunzip   
    - name: Extract archive
	  command: chdir=/usr/share /bin/tar xvf /opt/apache-tomcat-7.0.61.tar.gz -C /opt/ creates=/opt/apache-tomcat-7.0.61
    - name: Symlink install directory
      file: src=/opt/apache-tomcat-7.0.61 path=/usr/share/tomcat state=link
	  // tomcat is installed in /opt/apache-tomcat-7.0.61 for to create short cut /usr/share/tomcat
    - name: Change ownership of Tomcat installation
      file: path=/usr/share/tomcat/ owner=tomcat group=tomcat state=directory recurse=yes
    - name: Configure Tomcat server
	  template: src=server.xml dest=/usr/share/tomcat/conf/
	  notify: restart tomcat

	- name: Configure Tomcat users
	  template: src=tomcat-users.xml dest=/usr/share/tomcat/conf/
	  notify: restart tomcat

	- name: Install Tomcat init script i.e configure as a service
	  copy: src=tomcat-initscript.sh dest=/etc/init.d/tomcat mode=0755

	- name: Start Tomcat
	  service: name=tomcat state=started enabled=yes

	- name: deploy iptables rules
	  template: src=iptables-save dest=/etc/sysconfig/iptables
	  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '6'"
	  notify: restart iptables

	- name: insert firewalld rule for tomcat http port
	  firewalld: port={{ http_port }}/tcp permanent=true state=enabled immediate=yes
	  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

	- name: insert firewalld rule for tomcat https port
	  firewalld: port={{ https_port }}/tcp permanent=true state=enabled immediate=yes
	  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"

	- name: wait for tomcat to start
	  wait_for: port={{http_port}}	  
			
	1)
	 cp /etc/ansible/hosts/  dev_invetory // giving own inventory name
	 
	Invetory File:
	 
	[tomcat]

	2) copy public key
	cat ~/.ssh/rsa.pub
	3) to ssh from control m/c
	    ssh ec2_user@private_ip_address
	4) ansible-playbook -i dev_inventory tomcat.yml
	
	sudo su tomcat
	   
   rm tomcat.swap file - to delete swap file
   

   eg: ansible all -m setup --filter=ansible_os_family
----------------------------------------------------------


   To d/w any line
   wget https://github.com/javahometech/tomcat-ansible/blob/master/roles/tomcat/files/tomcat-initscript.sh
   
   ln -s 
   
   
Repo: in javahome - tomcat-ansible
                  - ansible-july
				  - ansible-


Task:

1) Configure loadbalancer with 2 webservers  

Task: Write a playbook to configure loadbalancer using nginx 

- can use as rever proxy
- loadbalancing
- web server
- load balaning - common endpoint(single ip) - for all webservers
- Before installing nginx using playbook do first install nginx manually and show

Invetroy file:
[loadbalancer]
172.31.xx.XXX ansible_user=ec2-user

Establish passwordless authentication
vi dev-invetory
copy pub key

goto nginx node
vi .ssh/autorized_key, goto end paste the key


connect manage node from control m/c
-------------------------------------
loadbalancer.yml
---
 - hosts: loadbalancer
   become: true
   tasks:
     - name: configure nginx rpm
       yum: name=http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
     - name: Install ngixn server
       yum:
         name: nginx
         state: present
         enablerepo: nginx
     - name: start and enable nginx server
       service:
          name: nginx
          state: started
          enabled: yes
     - name: copy nginx.conf to the nginx server
       template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
       notify: restart the server

   handlers:     
     - name: restart the server
       service: name=nginx state=restarted

	   
Nginx config file:
------------------

http {
 upstream backend {
    server 172.31.18.50:8080;
	server 172.31
 }
 server {
   listen 80;
   location / {
      proxy_pass  http://backend;
   }
 }
}	   

Jenkins must create a war file and it must upload war file to sonatype nexus
then the next jenkins must call deploy palybook which download from nexus and deploy into tomcat.

step 1: upload war file to nexus and deploy into tomcat

-----------------------
Install Sonatype Nexus
-----------------------

step: install sonatype nexus
      - minimum 4GB - storage - 8GB fine
Nexus system requirements:
      - t2.medium - check t2.medium pricing - usd
-------------------------------------------------------------	  
wget https://download.sonatype.com/nexus/3/latest-unix.tar.gz
tar -xvf latest-unix.tar.gz
mv nexus-3.23/ nexus3
change permissions
chown -R ec2-user:ec2-user nexus3/
chown -R ec2-user:ec2-user sonatype-work/
goto bin
./nexus start
-------------------------------------------------------------

Nexus required Jdk 1.8:
----------------------
update java version:
yum list | grep java-1.8 
- here devel not required bcoz not compiling code here
chown -R ec2-user:ec2-user sonatype-work/

logs:
ls sonatype-work/nexus3/logs



Nexus download location:
------------------------
https://www.sonatype.com/download-oss-sonatype

To access a direct download link, visit help.sonatype.com.
 

   
Task:	  
Write a playbook, to install nexus and configure  

Configuring nexus as service
---------------------------
 
Task: 
- Write tomcat-deplot playbook to deploy war file from nexus and copy this war file to tomcat

How to read maven version from jenkins and pass to ansible playbook
------------------------------------------------------
- jenkins pipeline utility steps plugins
- Plugin Pipeline utility steps.
- pipeline syntax: readMavenPom

def pom=readMavenPom file: 'pom.xml'
echo pom.version
ansible playbook 

ansbile valut:
---------------
 - vi dev-var.yml
   
 - In playbook, specify path of variables
   vars_files:
     - dev-vars.yml
	   - nexus_url: http://172.31.17.173:8081/repository/maven-releases/
     - nexus_user: admin
     - nexus_pwd: admin123
     - war_version: 0.0.1
  
ansible-valut encrypt dev-var.yml
cat dev-var.yml

while decrpt playbook need to pass passw
 ord
ansible-playbook  --help | grep valut

- create separte file for password
    --valut-password-file valut_pwd.txt
- create environment variable
   ANSIBLE_VAULT_PASSWORD_FILE
  
add /edit  
   ansible-valut edit  dev-vars.yml
   
ansible-valut view dev-vars.yml
ansible-valut decrypt dev-vars.yml

ansible_include:
- this option gives ability to breack one playbook into small playbook
- smaller can be reuse by including them in diff place.
one.yml:
---
 - name:
   debug:
     msg: 'This is from one.yml'
	 
two.yml
  ---
 - name:
   debug:
     msg: 'This is from one.yml'	 

include-demo.yml
---
-hosts: localhost
tasks:
- include: one.yml
- include: two.yml
	 
	 
   


Write a playbook, to install load balancer
Write a playbook, to install 2 webservers
write a playbook, to deploy war into webservers
write a playbook, to install mysql

   
   
google search:
--------------
ansible lineinfile module   
  
