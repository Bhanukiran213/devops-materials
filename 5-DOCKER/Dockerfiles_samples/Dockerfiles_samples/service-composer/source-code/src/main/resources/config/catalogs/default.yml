# Default Services Catalog
---
name: Default Catalog
id: default

# List of Categories under which services are grouped together
categories:
  # Security Services
  - name: Service Security
    order: 1
    description: Components that provide services related to securing the application eco-system.
    services:
      - id: oauth2-authorization-service
        name: OAuth-2 Authorization Service
        order:  1
        description: >
                      OAuth (Open Authorization) is an open standard for token-based authentication and authorization on the Internet. 
                      OAuth, allows an end user's account information to be used by services, without exposing the user's password.
        implicitIncludes: 
          - mysql 
      

  # Microservices Chassis
  - name: Microservice Chassis
    order: 2
    description: Templates you can use to quickly and easily get started with developing microservices.  
    services:
      - id: resource-service-template
        name: Resource Service
        order:  1
        description: >
                      Provides the scaffolding that includes all necessary application glue code to quickly get started with building business services.
                                           

  # API Management
  - name: API Management
    order: 6
    description: >
                  Components that abstracts the application eco-system that is made up of multiple individually managed services,
                  provides single coherent view of the application.  
    services:
      - id: api-documentation-swagger
        name: API Documentation (Swagger)
        order:  1
        description: >
                      Adds standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the 
                      capabilities of the service without access to source code, documentation, or through network traffic inspection.
        implicitIncludes:
          - resource-service-template 
      
      - id: edge-service-zuul
        name: Edge Service (Zuul)
        order:  2
        description: >
                      Implement an API gateway that is the single entry point for all clients. 
                      It receives all the requests coming from the UI and then delegates the requests to internal microservices.
                      

  # User Interface
  - name: User Interface
    order: 7
    description: Templates you can use to quickly and easily get started with developing UI services.  
    services:
      - id: client-application-java
        name: Frontend (Java)
        order:  1
        description: >
                      Shall be used when the microservices application is also responsibe for user experience. 
                      This is ideal if the UI module is required to have some server side processing.
        implicitExcludes:
          - client-application-angular4 
         
      - id: client-application-angular4
        name: Frontend (Angular 4)
        order:  2
        description: >
                      Shall be used when the microservices application is also responsibe for user experience. 
                      This is ideal when no server side processing is required w.r.t the UI implementation.
        implicitExcludes:
          - client-application-java
     
      - id: micro-frontends
        name: Micro Frontends Platform
        order:  3
        description: >
                      Build micro frontends that coexist and can each be written with their own framework. This allows you to - 
                      1. Use multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you're using) 
                      2. Write code using a new framework, without rewriting your existing app
                      3. Lazy load code for improved initial load time.


  # Observability
  - name: Observability
    order: 8
    description: Components that ensure that your application services process and perform in an expected manner and scope.
    categories: 
      - name: Application Performance Monitoring (APM)
        order: 1
        description: >
                      APM components that do monitoring and management of performance and availability of software applications.
        services:
          - id: stagemonitor
            name: Performance Monitoring & Metrics (Stagemonitor)
            order:  1
            description: >
                          Built around Stagemonitor, an open source solution to application performance monitoring for java server applications.
                          Real-time application metrics are collected unintrusively and presented in a easy to use user interface.
            implicitIncludes:
              - elasticsearch
              - kibana
                      
      - name: Log Management
        order: 2
        description: >
                      Components that help manage large volumes of computer generated log messages.
        services:
          - id: log-aggregation-elk
            name: Log Aggregation (ELK)
            order:  1
            description: >
                          "ELK" is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana.
                          Together these tools are used to aggregate logs into a central place for analysis and reporting.
            implicitIncludes:
              - elasticsearch
              - logstash
              - kibana
                        
  # Persistence Services
  - name: Persistence Services
    order: 13
    description: Components that offer persistence services to the application.
    categories: 
      - name: Relational Databases
        order: 1
        description: >
                      Database management systems that are based on relational model.
        services:
          - id: mysql
            name: MySQL Database
            order: 1
            description: >
                          The most popular Open Source SQL database management system, is developed, distributed, and supported by Oracle Corporation.
        
      - name: NoSql Datastores
        order: 2
        description: >
                      Datastores that does not follow the relational model,  are especially useful for working with large sets of distributed data.
        services:
          - id: elasticsearch
            name: Elasticsearch
            order: 1
            description: >
                          An open-source, RESTful, distributed search and analytics engine built on Apache Lucene.
          - id: cassandra
            name: Cassandra
            order: 2
            description: >
                          A distributed database for managing large amounts of structured data across many commodity servers, 
                          while providing highly available service and no single point of failure.
            enabled: false   


  # Other Tools
  - name: Other Tools
    order: 14
    description: Off-the-shelf tools that provide supporting services to the application.
    services:
      - id: kibana
        name: Kibana 
        order:  1
        description: >
                      An open source analytics and visualization platform designed to work with Elasticsearch. 
                      You can easily perform advanced data analysis and visualize your data in a variety of charts, tables, and maps. 
        implicitIncludes:
          - elasticsearch
          
      - id: logstash
        name: Logstash 
        order:  2
        description: >
                      An open source data collection engine with real-time pipelining capabilities. 
                      Logstash can dynamically unify data from disparate sources and normalize the data into destinations of your choice. 
                                  
            
  # Deployment Plarforms
  - name: Deployment Platform
    order: 15
    description: Target deployment platform you consider to deploy the application.
    services:
      - id: docker-swarm
        name: Docker Swarm
        order: 1
        description: >
                      A simple clustering and scheduling tool for Docker containers, 
                      With Swarm you can manage a cluster of Docker nodes as a single virtual system.
        implicitExcludes:
          - kubernetes
          - pas
          - heroku
      - id: kubernetes
        name: Kubernetes
        order: 2
        description: >
                      An open-source platform designed to automate deploying, scaling, and operating application containers.
        enabled: false
        implicitExcludes:
          - docker-swarm
          - pas
          - heroku
      - id: pas
        name: Pivotal Application Services
        order: 3
        description:  >
                      A multi cloud application platform as a service (PaaS) governed by Pivotal systems.
        enabled: false
        implicitExcludes:
          - docker-swarm
          - kubernetes
          - heroku
      - id: heroku
        name: Heroku
        order: 4
        description: >
                      A cloud platform as a service (PaaS) that lets companies build, deliver, monitor and scale applications.
        enabled: false
        implicitExcludes:
          - docker-swarm
          - kubernetes
          - pas
          
  # Platform Monitoring
  - name: Platform Monitoring
    order: 16
    description: Off-the-shelf components that monitor the deployment platforms.
    categories: 
      - name: Docker Swarm
        order: 1
        description: >
                      Tools for monitoring Docker Swarm environment.
        services:
          - id: portainer
            name: Portainer
            order: 1
            description: >
                          Portainer is an open-source lightweight management UI which allows you to easily manage your Docker hosts or Swarm clusters.
            dependentServices:
              - docker-swarm
              
          - id: docker-visualizer
            name: Swarm Visualizer
            order: 2
            description: >
                          A visualizer for Docker Swarm Mode using the Docker Remote API, Node.JS, and D3.
            dependentServices:
              - docker-swarm