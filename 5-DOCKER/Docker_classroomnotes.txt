We have as statice website,in GIT
We wanna Dockerise this website
Run on Docker container

Dockerfile --> Docker Image --> Containers --> app run

Git --> https://github.com/javahometech/javahome-app

-- Apache webserver to deploy website
-- apache container container apache server and your application

Dockerfile:
***********

FROM ubuntu:16.04 // specifice ubuntu image
LABEL MAINTAINER="nagireddy" // have key value pairs
LABEL PURPOSE="Devops Training"

RUN apt-get update

RUN apt-get install apache2 -y

RUN apt-get install git -y

RUN git clone https://github.com/javahometech/javahome-app

WORKDIR /javahome-app

RUN rm -rf .git // remove unwanted things

RUN cp -Rf * /var/www/html/ - copy code to /var/www/html/

RUN rm -rf /javahome-app

EXPOSE 80 // this container accepts connections over 80

RUN apt-get remove git -y
CMD ["apachectl", "-D","FOREGROUND"]  // run time instruction when you say docker run this command will execute.

- any traffice come to your host with 8080 and its routed to 80 which is exposing in container.

Why Docker?
**********
- portability - on your windows
- easy to deploy
- lightweight - it wont consume resources like vm
- performs well - it consume less resources.

Responsibilities:
*****************

- have to understand to setup application
- developers may setup in diff way.


Docker networking:
******************

- python application one container
- redis in another container
- both run same host or diff host

- docker networking is importent for container communicate each other
   - Bridge N/w
   - overlay N/w
- Bridge N/w- Containers running on same host can communicat with bridge n/w
  dev will have single node, production will have multiple nodes. use for dev.
- overlay N/w - Containers running on diff host can communicate with overlay n/w. use for production

  docker network ls
  By default, bridg, host, none is created.

custome bridge:
**************
 - we also can create custom bridge n/w
 - Any container you run, it by default joins "default bridge" n/w.

 - docker network inspect bridge // it give json o/p.
 -d - dettach mode - i want my apache keep it up and running.

docker run -itd --name container-1 alphine
docker run -itd --name container-2 alphine

docker exec -it container-1 ash - this command will take you terminal of you container.
  ping ip-address of container-2
  ping container-2

 - container will communicate with only ip.
 - if you create custome network will communitcat with dns name also.

 - auto-scalling taking care by swarm or kubernatees.
 - if you want to have addition resources we can add in the run command.
 - create custom bridge network
   docker network create --driver=bridge javahome.
 - docker run -itd --name container-1 --network=javahome alphine
 - docker run -itd --name container-2 --network=javahome alphine
    ping ipaddress
    ping cont2- built in dns resolve machanisam added the ip. in default bridge not have that machanisam.

  - mostly use dns names

python-app
 --redis (hostname=redis)
 -- create custom bridge network
   docker network create --driver=bridge javahome
 -- Run Redis container
   docker run -d --name redis --network=javahome redis
 -- Run python-app which talks to above redis app
   docker run -d --name pythonapp --network=java -p 8080:5000 kammanna/python-app:7

docker-compose:
**************

 - it is utility reads details about our microservices from a file(docker-compose file). and will automatically setup       Dev/Test environments on a single host.

 XML,JSON,YAML

 - XML
   - store configuration data
   - Exchanging data b/w applicaitions 2kb
- JSON
   - store configuration data
   - Exchanging data b/w application
   - JSON is lighter than XML 1kb
- YAML
   - Store configuration data

Yaml:

---   // default indication of yaml it is optional

- institute:
   name : Javahome
   location: Banglore
   courses_offered:
      - Devops
      - AWS
   students: 
      - name: Hari // it is one entry and have multiple properties
        phone: 999999
        courses_enrolled:
          - Devops
          - AWS
      - name: Kishore
        phone: 8888888


- institute:
   name : Javahome
   location: Banglore
   courses_offered:
      - Devops
      - AWS
   students: 
      - name: Hari // it is one entry and have multiple properties
        phone: 999999
        courses_enrolled:
          - Devops
          - AWS
      - name: Kishore
        phone: 8888888



---
 - Product: "mobile"
    name: Mobile
    cost: 9500
    spec: // when you have multiple specs then use - spec
      ram:2
      storage: 36GB
      camara: 
        rear: 5 pixels
        front: 12 pixels
    
    reviews:
       - description: this is nice prodcut
         start:4.5
       - description: this is bad
         starts: 1


Install docker compose on linux:
********************************
   - search docker compose download
   
  
Task:
  - docker run
  - docker attach
  - add file
  - stop container
  - start container
  - remove container

Task:
  - create volume
     docker volume create appplogs // create volume
     docker volume inspect applogs check mountpoint
     docker run -itd -v applogs:/hari --name alphine alphine
	 
	 docker attach alphine
	 cd hari // when mount hari folder create automatically if not there
	   - create a file one.sh
	 sudo ls /var/lib/docker/volumes/applogs/_data 
	 docker rm -f alphine

Task: how two containers running same host share data.
        using volumes
		
- To create on your own mountpoint -v /home/ec2-user/mydata:/hari

Production setup:
*****************
 - In production we run containers on multiple nodes(servers)
 - we also run same container with multiple replicase
 -  required multiple replicase to handle more thoughtput.

 - To manage docker containers on cluster of nodes, we need lots of orchestration to be taken care.
CLuster:
- one single node - performance limit- size limites - horizantal can increase nodes.

 - For container Orchestration there are tools available.
    - Kuberneter (very popular & powerfull) - its been used by google for decades.
	  kuberneter is opensource.
	- Docker swarm(Comes along with docker) - This is from Docker Inc - docker own orchestration tool.
	- Mesos, From Apache Group. - 
	- Openshift - A kubernetes platform from RedHot.
    - Rancher Labs - A platform for Kubernetes, swarm, and Mesos.	
	
Docker swarm:
**************
  - Is container orchestration tool
  - Is opensource, comes along with docker.
  - Is simple to learn and use.

For this example we need five nodes:

  - Python App (Fronend)
  - Redis (Backend)
  - Docker swam works on any hosts(VMs,AWS,Google,Azure,Physical server,etc..)

  Im using online tool, play with docker for creating 5 nodes.
  In order to use play with docker, you need docker hub account.

play with docker:

link:https://labs.play-with-docker.com/

manager node:
*************
 - manager to scheduling.
 - recives instruction from client i.e anybody issuing commands on docker swarm.
    - instruction like i want 2 replicas on node.
 - always maintaine multiple manager nodes. note: dont run with one manager. minimum 3. create in odd number 3 node, 5 nodes, 7 nodes.
 - if have 3 manager node 1 is leader node.
 - new manage allecteded as a leader.- controll other manager node.in obsence of leades they do work.
 - manager have scheduling - it will know where to run command
 
 worker node:
************* 
 - obey instruction from manager. periodically send the reports to manager node. 
 
 docker swarm:
 *************
 docker swarm init --advertise-addr 192.168.0.18 //swarm clusteer has manager
 join as manager
 docker swarm join-token manager
 join as worker
 docker swarm join --token aaaa ipaddress:port
 
 docker swarm take care of maintaining desired state of our service that is if we mention replicas=10 and because of some 
 reason 3 containers are stopped or terminated docker swarm will add 3 new containers.to meet desired state in our case which
 is 10.
  
 load balancer:
 *************
   - any service we create in docker swarm is automatically load balance.
   - to access your service any ip.
   - suppose service running on node1 and node2 if you access from node3 it will work
 
 Task:
 
  take 5 nodes
  
   3 master node
   2 worker node
     
   docker node ls
    
 - service:
   - in docker swarm context your micro service.
   docker service ls
   docker service create -p 80:5000 --name=python --replicas=7 kammana/python-app:7 //this command running on manager node.
   
   docker service ps python
   docker service rm python  
   docker service update --replicas=5 python // you can scale up service.   
   
   actually capacity - 
   desire capacity - 7
   
   Overlay network:
   ****************
   - is used in docker swarm containers can communicate accrose nodes.
   
   docker network create --driver=overlay javahomeswarm
   docker network ls
   docker service update --network-add=javahomeswarm python
  